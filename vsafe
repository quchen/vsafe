#!/usr/bin/env bash

# vsafe - Very Simple Asymmetric File Exchange
#
# Inspired by this blog post: https://bjornjohansen.no/encrypt-file-using-ssh-key

set -euo pipefail

echo_error() {
    echo "ERROR: $*" >&2
}

assert_program_exists() {
    if ! command -v "$1"; then
        echo_error "$1 not installed"
        abort=true
    fi > /dev/null
}
assert_program_exists openssl
assert_program_exists ssh-keygen
${abort:-false} && exit  1 || unset abort

generate_random_symmetric_key_base64() {
    key_length_bytes=32
    openssl rand "$key_length_bytes" | base64
}

encrypt_payload_base64() {
    pass=$1
    input_file=$2

    echo "$pass" | openssl aes-256-cbc -in "$input_file" -pass stdin | base64
}

encrypt_symmetric_key_base64() {
    symmetric_key=$1
    recipients_ssh_pubkey_file=$2

    openssl rsautl -encrypt -oaep -pubin -inkey <(ssh-keygen -e -f "$recipients_ssh_pubkey_file" -m PKCS8) -in <(echo "$symmetric_key") | base64
}

encrypt() {
    pubkey_file=$1
    input_file=$2

    symmetric_key=$(generate_random_symmetric_key_base64)
    encrypted_payload_base64=$(encrypt_payload_base64 "$symmetric_key" "$input_file")
    encrypted_symmetric_key_base64=$(encrypt_symmetric_key_base64 "$symmetric_key" "$pubkey_file")

    cat <<EOF
#!/usr/bin/env bash

# Dead simple encrypted file
# ==========================
#
# You’ve been given encrypted data. You can decode it by simply saving the whole
# text you’re reading right now to a file and running it:
#
#     <this> private.key
#     -- or if it’s an encrypted file:
#     <this> private.key > decrypted-file
#
# Alternatively, you may review the steps taken below, and decode it manually.

set -euo pipefail

decrypt() {
    local privkey_file="\$1"
    {
        # Decrypt RSA-encrypted AES key
        openssl rsautl -decrypt -oaep -inkey "\$privkey_file" -in <(echo "\$symmetric_key" | base64 --decode)
    } | {
        # Decrypt payload
        openssl aes-256-cbc -d -in <(echo "\$payload" | base64 --decode) -pass stdin
    }
}

symmetric_key=\$(cat <<SYMMETRIC_KEY_RSA_BASE64
$encrypted_symmetric_key_base64
SYMMETRIC_KEY_RSA_BASE64
)
payload=\$(cat <<PAYLOAD_AES_BASE64
$encrypted_payload_base64
PAYLOAD_AES_BASE64
)
privkey_file=\${1:?First parameter expected: private key file}
decrypt "\$privkey_file"
EOF
}

generate_keypair() {
    filename=$1

    # -q: quiet
    # -N "": passphrase empty string
    # -t rsa: RSA key
    # -f …: Generate …{,.pub}
    ssh-keygen -t rsa -f "$filename" -q -N ""
}

test() (
    echo "Alice sends Bob a file"
    self=$(cd "$(dirname "$0")" && echo "$(pwd)/$(basename "$0")") # Mac-compatible readlink-f substitute

    workbench=$(mktemp -d vsafe-test_XXXXX)
    workbench=$(cd "$workbench" && pwd)
    trap "rm -rf '$workbench'" EXIT

    mkdir -p "$workbench/alice"
    alice="$workbench/alice"

    mkdir -p "$workbench/bob"
    bob="$workbench/bob"

    {
        echo "  1. Bob generates key"
        cd "$bob"
        $self keygen "bobs-key"
    }

    {
        echo "  2. Bob sends pubkey to Alice"
        cd "$bob"
        cp "bobs-key.pub" "$alice/"
    }

    {
        echo "  3. Alice encrypts her file"
        cd "$alice"
        openssl rand -base64 20 > "alice-secret.txt"
        echo "     Contents: $(<alice-secret.txt)"
        $self encrypt "bobs-key.pub" "alice-secret.txt" > "alice-secret.txt.enc"
    }

    {
        echo "  4. Alice sends encrypted file to Bob"
        cd "$alice"
        cp "alice-secret.txt.enc" "$bob/"
    }

    {
        echo "  5. Bob decrypts Alice’s data"
        cd "$bob"
        chmod +x alice-secret.txt.enc
        ./alice-secret.txt.enc bobs-key > alice-secret-at-bob.txt
        echo "     Contents: $(<alice-secret-at-bob.txt)"
    }

    {
        if diff "$alice/alice-secret.txt" "$bob/alice-secret-at-bob.txt" > /dev/null; then
            echo "  6. Data retrieved successfully :-)"
        else
            echo "  6. Oh no, test failed :-("
        fi
    }
)

emphasis() {
    echo -e "\e[3m$*\e[m"
}

alice() {
    echo -e "\e[31m$*\e[m"
}

bob() {
    echo -e "\e[32m$*\e[m"
}

help() {
local self=$(basename "$0")
local alice=$(echo -e "\e[34mAlice\e[m")
local bob=$(echo -e "\e[33mBob\e[m")
cat <<EOF
vsafe - Very Simple Asymmetric File Exchange
============================================

Workflow
--------

$alice wants to send $bob a file.

  1. $bob generates a keypair.
     $(emphasis Console:) $self keygen bobs-key

  2. $bob sends $alice his pubkey (bobs-key.pub), e.g. via email.

  3. $alice encrypts her data using $bob’s pubkey.
     $(emphasis Console:) $self encrypt bobs-key.pub alice-secret.txt > encrypted.txt

  4. $alice sends the encrypted file to $bob (encrypted.txt).

  5. $bob decrypts the file using his pubkey. He can do so by following the
     instructions contained in the file, or by simply running it as a script,
     since it is a runnable decryption program.
     $(emphasis Console:) chmod +x encrypted.txt
     $(emphasis Console:) ./encrypted.txt bobs-key > alice-secret.txt

Command overview
----------------

Usage: $self help
       $self encrypt
       $self keygen

help                   Show this help
encrypt PUBKEY FILE    Encrypt FILE to stdout using PUBKEY file
keygen FILE            Generate keypair: FILE, FILE.pub
EOF
}

main() {
    if [ -z ${1+x} ]; then
        echo_error "First parameter missing: mode of operation"
        help
        exit 2
    fi
    for arg in "$@"; do
        if [[ $arg == "-h" ]] || [[ $arg == "--help" ]]; then
            help
            exit
        fi
    done
    case "$1" in
        encrypt)
            shift
            if [ -z ${1+x} ]; then
                echo_error "Parameters missing: public key file, payload file"
                exit 3
            else
                pubkey_file=$1
            fi
            shift
            if [ -z ${1+x} ]; then
                echo_error "Parameter missing: payload file"
                exit 4
            else
                encrypted=$1
            fi
            shift
            if [[ $# -ne 0 ]]; then
                echo_error "Superflous parameters: $*"
                exit 5
            fi
            encrypt "$pubkey_file" "$encrypted"
            ;;
        decrypt)
            echo_error "There is no decrypting step built into this program,"
            echo_error "since the resulting encrypted file is self-contained."
            echo_error "Simply follow the instructions in the encrypted file!"
            exit 6
            ;;
        keygen)
            shift
            if [ -z ${1+x} ]; then
                echo_error "Parameter missing: filename of the generated key"
                exit 7
            else
                filename=$1
            fi
            shift
            if [[ $# -ne 0 ]]; then
                echo_error "Superflous parameters: $*"
                exit 8
            fi
            generate_keypair "$filename"
            ;;
        test)
            shift
            echo "Running testsuite"
            test
            ;;
        help)
            help
            exit
            ;;
        *)
            echo_error "Unrecognized operations mode: $1"
            help
            exit 9
            ;;
    esac
}

main "$@"
